<?php
/*
 * DeskPRO (r) has been developed by DeskPRO Ltd. https://www.deskpro.com/
 * a British company located in London, England.
 *
 * All source code and content Copyright (c) 2017, DeskPRO Ltd.
 *
 * The license agreement under which this software is released
 * can be found at https://www.deskpro.com/eula/
 *
 * By using this software, you acknowledge having read the license
 * and agree to be bound thereby.
 *
 * Please note that DeskPRO is not free software. We release the full
 * source code for our software because we trust our users to pay us for
 * the huge investment in time and energy that has gone into both creating
 * this software and supporting our customers. By providing the source code
 * we preserve our customers' ability to modify, audit and learn from our
 * work. We have been developing DeskPRO since 2001, please help us make it
 * another decade.
 *
 * Like the work you see? Think you could make it better? We are always
 * looking for great developers to join us: http://www.deskpro.com/jobs/
 *
 * ~ Thanks, Everyone at Team DeskPRO
 */

/**
 * PersonType
 *
 * PHP version 5
 *
 * @category Class
 * @package  DeskPRO\API
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DeskPRO API
 *
 * DeskPRO API
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DeskPRO\API\Model;

use \ArrayAccess;
use \DeskPRO\API\ObjectSerializer;

/**
 * PersonType Class Doc Comment
 *
 * @category Class
 * @package  DeskPRO\API
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PersonType implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PersonType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'primary_email' => 'string',
        'emails' => 'object[]',
        'password' => 'string',
        'title_prefix' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'override_display_name' => 'string',
        'summary' => 'string',
        'timezone' => 'string',
        'organization' => 'string',
        'organization_position' => 'string',
        'language' => 'string',
        'labels' => 'string[]',
        'user_groups' => 'string[]',
        'agent_groups' => 'string[]',
        'fields' => 'object',
        'contact_data' => 'object',
        'teams' => 'string[]',
        'primary_team' => 'string',
        'agent_data' => 'object',
        'phone_numbers' => 'object[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'primary_email' => null,
        'emails' => null,
        'password' => null,
        'title_prefix' => null,
        'first_name' => null,
        'last_name' => null,
        'override_display_name' => null,
        'summary' => null,
        'timezone' => null,
        'organization' => null,
        'organization_position' => null,
        'language' => null,
        'labels' => null,
        'user_groups' => null,
        'agent_groups' => null,
        'fields' => null,
        'contact_data' => null,
        'teams' => null,
        'primary_team' => null,
        'agent_data' => null,
        'phone_numbers' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'primary_email' => 'primary_email',
        'emails' => 'emails',
        'password' => 'password',
        'title_prefix' => 'title_prefix',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'override_display_name' => 'override_display_name',
        'summary' => 'summary',
        'timezone' => 'timezone',
        'organization' => 'organization',
        'organization_position' => 'organization_position',
        'language' => 'language',
        'labels' => 'labels',
        'user_groups' => 'user_groups',
        'agent_groups' => 'agent_groups',
        'fields' => 'fields',
        'contact_data' => 'contact_data',
        'teams' => 'teams',
        'primary_team' => 'primary_team',
        'agent_data' => 'agent_data',
        'phone_numbers' => 'phone_numbers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'primary_email' => 'setPrimaryEmail',
        'emails' => 'setEmails',
        'password' => 'setPassword',
        'title_prefix' => 'setTitlePrefix',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'override_display_name' => 'setOverrideDisplayName',
        'summary' => 'setSummary',
        'timezone' => 'setTimezone',
        'organization' => 'setOrganization',
        'organization_position' => 'setOrganizationPosition',
        'language' => 'setLanguage',
        'labels' => 'setLabels',
        'user_groups' => 'setUserGroups',
        'agent_groups' => 'setAgentGroups',
        'fields' => 'setFields',
        'contact_data' => 'setContactData',
        'teams' => 'setTeams',
        'primary_team' => 'setPrimaryTeam',
        'agent_data' => 'setAgentData',
        'phone_numbers' => 'setPhoneNumbers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'primary_email' => 'getPrimaryEmail',
        'emails' => 'getEmails',
        'password' => 'getPassword',
        'title_prefix' => 'getTitlePrefix',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'override_display_name' => 'getOverrideDisplayName',
        'summary' => 'getSummary',
        'timezone' => 'getTimezone',
        'organization' => 'getOrganization',
        'organization_position' => 'getOrganizationPosition',
        'language' => 'getLanguage',
        'labels' => 'getLabels',
        'user_groups' => 'getUserGroups',
        'agent_groups' => 'getAgentGroups',
        'fields' => 'getFields',
        'contact_data' => 'getContactData',
        'teams' => 'getTeams',
        'primary_team' => 'getPrimaryTeam',
        'agent_data' => 'getAgentData',
        'phone_numbers' => 'getPhoneNumbers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['primary_email'] = isset($data['primary_email']) ? $data['primary_email'] : null;
        $this->container['emails'] = isset($data['emails']) ? $data['emails'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['title_prefix'] = isset($data['title_prefix']) ? $data['title_prefix'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['override_display_name'] = isset($data['override_display_name']) ? $data['override_display_name'] : null;
        $this->container['summary'] = isset($data['summary']) ? $data['summary'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['organization'] = isset($data['organization']) ? $data['organization'] : null;
        $this->container['organization_position'] = isset($data['organization_position']) ? $data['organization_position'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['labels'] = isset($data['labels']) ? $data['labels'] : null;
        $this->container['user_groups'] = isset($data['user_groups']) ? $data['user_groups'] : null;
        $this->container['agent_groups'] = isset($data['agent_groups']) ? $data['agent_groups'] : null;
        $this->container['fields'] = isset($data['fields']) ? $data['fields'] : null;
        $this->container['contact_data'] = isset($data['contact_data']) ? $data['contact_data'] : null;
        $this->container['teams'] = isset($data['teams']) ? $data['teams'] : null;
        $this->container['primary_team'] = isset($data['primary_team']) ? $data['primary_team'] : null;
        $this->container['agent_data'] = isset($data['agent_data']) ? $data['agent_data'] : null;
        $this->container['phone_numbers'] = isset($data['phone_numbers']) ? $data['phone_numbers'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets primary_email
     *
     * @return string
     */
    public function getPrimaryEmail()
    {
        return $this->container['primary_email'];
    }

    /**
     * Sets primary_email
     *
     * @param string $primary_email primary_email
     *
     * @return $this
     */
    public function setPrimaryEmail($primary_email)
    {
        $this->container['primary_email'] = $primary_email;

        return $this;
    }

    /**
     * Gets emails
     *
     * @return object[]
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     *
     * @param object[] $emails emails
     *
     * @return $this
     */
    public function setEmails($emails)
    {
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password password
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets title_prefix
     *
     * @return string
     */
    public function getTitlePrefix()
    {
        return $this->container['title_prefix'];
    }

    /**
     * Sets title_prefix
     *
     * @param string $title_prefix title_prefix
     *
     * @return $this
     */
    public function setTitlePrefix($title_prefix)
    {
        $this->container['title_prefix'] = $title_prefix;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets override_display_name
     *
     * @return string
     */
    public function getOverrideDisplayName()
    {
        return $this->container['override_display_name'];
    }

    /**
     * Sets override_display_name
     *
     * @param string $override_display_name override_display_name
     *
     * @return $this
     */
    public function setOverrideDisplayName($override_display_name)
    {
        $this->container['override_display_name'] = $override_display_name;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return string
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string $summary summary
     *
     * @return $this
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string $timezone timezone
     *
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets organization
     *
     * @return string
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param string $organization organization
     *
     * @return $this
     */
    public function setOrganization($organization)
    {
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets organization_position
     *
     * @return string
     */
    public function getOrganizationPosition()
    {
        return $this->container['organization_position'];
    }

    /**
     * Sets organization_position
     *
     * @param string $organization_position organization_position
     *
     * @return $this
     */
    public function setOrganizationPosition($organization_position)
    {
        $this->container['organization_position'] = $organization_position;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language language
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return string[]
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param string[] $labels labels
     *
     * @return $this
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets user_groups
     *
     * @return string[]
     */
    public function getUserGroups()
    {
        return $this->container['user_groups'];
    }

    /**
     * Sets user_groups
     *
     * @param string[] $user_groups user_groups
     *
     * @return $this
     */
    public function setUserGroups($user_groups)
    {
        $this->container['user_groups'] = $user_groups;

        return $this;
    }

    /**
     * Gets agent_groups
     *
     * @return string[]
     */
    public function getAgentGroups()
    {
        return $this->container['agent_groups'];
    }

    /**
     * Sets agent_groups
     *
     * @param string[] $agent_groups agent_groups
     *
     * @return $this
     */
    public function setAgentGroups($agent_groups)
    {
        $this->container['agent_groups'] = $agent_groups;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return object
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param object $fields fields
     *
     * @return $this
     */
    public function setFields($fields)
    {
        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets contact_data
     *
     * @return object
     */
    public function getContactData()
    {
        return $this->container['contact_data'];
    }

    /**
     * Sets contact_data
     *
     * @param object $contact_data contact_data
     *
     * @return $this
     */
    public function setContactData($contact_data)
    {
        $this->container['contact_data'] = $contact_data;

        return $this;
    }

    /**
     * Gets teams
     *
     * @return string[]
     */
    public function getTeams()
    {
        return $this->container['teams'];
    }

    /**
     * Sets teams
     *
     * @param string[] $teams teams
     *
     * @return $this
     */
    public function setTeams($teams)
    {
        $this->container['teams'] = $teams;

        return $this;
    }

    /**
     * Gets primary_team
     *
     * @return string
     */
    public function getPrimaryTeam()
    {
        return $this->container['primary_team'];
    }

    /**
     * Sets primary_team
     *
     * @param string $primary_team primary_team
     *
     * @return $this
     */
    public function setPrimaryTeam($primary_team)
    {
        $this->container['primary_team'] = $primary_team;

        return $this;
    }

    /**
     * Gets agent_data
     *
     * @return object
     */
    public function getAgentData()
    {
        return $this->container['agent_data'];
    }

    /**
     * Sets agent_data
     *
     * @param object $agent_data agent_data
     *
     * @return $this
     */
    public function setAgentData($agent_data)
    {
        $this->container['agent_data'] = $agent_data;

        return $this;
    }

    /**
     * Gets phone_numbers
     *
     * @return object[]
     */
    public function getPhoneNumbers()
    {
        return $this->container['phone_numbers'];
    }

    /**
     * Sets phone_numbers
     *
     * @param object[] $phone_numbers phone_numbers
     *
     * @return $this
     */
    public function setPhoneNumbers($phone_numbers)
    {
        $this->container['phone_numbers'] = $phone_numbers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


