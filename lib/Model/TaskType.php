<?php
/*
 * DeskPRO (r) has been developed by DeskPRO Ltd. https://www.deskpro.com/
 * a British company located in London, England.
 *
 * All source code and content Copyright (c) 2017, DeskPRO Ltd.
 *
 * The license agreement under which this software is released
 * can be found at https://www.deskpro.com/eula/
 *
 * By using this software, you acknowledge having read the license
 * and agree to be bound thereby.
 *
 * Please note that DeskPRO is not free software. We release the full
 * source code for our software because we trust our users to pay us for
 * the huge investment in time and energy that has gone into both creating
 * this software and supporting our customers. By providing the source code
 * we preserve our customers' ability to modify, audit and learn from our
 * work. We have been developing DeskPRO since 2001, please help us make it
 * another decade.
 *
 * Like the work you see? Think you could make it better? We are always
 * looking for great developers to join us: http://www.deskpro.com/jobs/
 *
 * ~ Thanks, Everyone at Team DeskPRO
 */

/**
 * TaskType
 *
 * PHP version 5
 *
 * @category Class
 * @package  DeskPRO\API
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DeskPRO API
 *
 * DeskPRO API
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DeskPRO\API\Model;

use \ArrayAccess;
use \DeskPRO\API\ObjectSerializer;

/**
 * TaskType Class Doc Comment
 *
 * @category Class
 * @package  DeskPRO\API
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TaskType implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TaskType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'title' => 'string',
        'person' => 'string',
        'date_due' => 'string',
        'visibility' => 'string',
        'assigned_agent' => 'string',
        'assigned_agent_team' => 'string',
        'assigned_department' => 'string',
        'ticket' => 'float',
        'tickets' => 'string[]',
        'labels' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'title' => null,
        'person' => null,
        'date_due' => null,
        'visibility' => null,
        'assigned_agent' => null,
        'assigned_agent_team' => null,
        'assigned_department' => null,
        'ticket' => null,
        'tickets' => null,
        'labels' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'title' => 'title',
        'person' => 'person',
        'date_due' => 'date_due',
        'visibility' => 'visibility',
        'assigned_agent' => 'assigned_agent',
        'assigned_agent_team' => 'assigned_agent_team',
        'assigned_department' => 'assigned_department',
        'ticket' => 'ticket',
        'tickets' => 'tickets',
        'labels' => 'labels'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'title' => 'setTitle',
        'person' => 'setPerson',
        'date_due' => 'setDateDue',
        'visibility' => 'setVisibility',
        'assigned_agent' => 'setAssignedAgent',
        'assigned_agent_team' => 'setAssignedAgentTeam',
        'assigned_department' => 'setAssignedDepartment',
        'ticket' => 'setTicket',
        'tickets' => 'setTickets',
        'labels' => 'setLabels'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'title' => 'getTitle',
        'person' => 'getPerson',
        'date_due' => 'getDateDue',
        'visibility' => 'getVisibility',
        'assigned_agent' => 'getAssignedAgent',
        'assigned_agent_team' => 'getAssignedAgentTeam',
        'assigned_department' => 'getAssignedDepartment',
        'ticket' => 'getTicket',
        'tickets' => 'getTickets',
        'labels' => 'getLabels'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['person'] = isset($data['person']) ? $data['person'] : null;
        $this->container['date_due'] = isset($data['date_due']) ? $data['date_due'] : null;
        $this->container['visibility'] = isset($data['visibility']) ? $data['visibility'] : null;
        $this->container['assigned_agent'] = isset($data['assigned_agent']) ? $data['assigned_agent'] : null;
        $this->container['assigned_agent_team'] = isset($data['assigned_agent_team']) ? $data['assigned_agent_team'] : null;
        $this->container['assigned_department'] = isset($data['assigned_department']) ? $data['assigned_department'] : null;
        $this->container['ticket'] = isset($data['ticket']) ? $data['ticket'] : null;
        $this->container['tickets'] = isset($data['tickets']) ? $data['tickets'] : null;
        $this->container['labels'] = isset($data['labels']) ? $data['labels'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets person
     *
     * @return string
     */
    public function getPerson()
    {
        return $this->container['person'];
    }

    /**
     * Sets person
     *
     * @param string $person person
     *
     * @return $this
     */
    public function setPerson($person)
    {
        $this->container['person'] = $person;

        return $this;
    }

    /**
     * Gets date_due
     *
     * @return string
     */
    public function getDateDue()
    {
        return $this->container['date_due'];
    }

    /**
     * Sets date_due
     *
     * @param string $date_due date_due
     *
     * @return $this
     */
    public function setDateDue($date_due)
    {
        $this->container['date_due'] = $date_due;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return string
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param string $visibility visibility
     *
     * @return $this
     */
    public function setVisibility($visibility)
    {
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets assigned_agent
     *
     * @return string
     */
    public function getAssignedAgent()
    {
        return $this->container['assigned_agent'];
    }

    /**
     * Sets assigned_agent
     *
     * @param string $assigned_agent assigned_agent
     *
     * @return $this
     */
    public function setAssignedAgent($assigned_agent)
    {
        $this->container['assigned_agent'] = $assigned_agent;

        return $this;
    }

    /**
     * Gets assigned_agent_team
     *
     * @return string
     */
    public function getAssignedAgentTeam()
    {
        return $this->container['assigned_agent_team'];
    }

    /**
     * Sets assigned_agent_team
     *
     * @param string $assigned_agent_team assigned_agent_team
     *
     * @return $this
     */
    public function setAssignedAgentTeam($assigned_agent_team)
    {
        $this->container['assigned_agent_team'] = $assigned_agent_team;

        return $this;
    }

    /**
     * Gets assigned_department
     *
     * @return string
     */
    public function getAssignedDepartment()
    {
        return $this->container['assigned_department'];
    }

    /**
     * Sets assigned_department
     *
     * @param string $assigned_department assigned_department
     *
     * @return $this
     */
    public function setAssignedDepartment($assigned_department)
    {
        $this->container['assigned_department'] = $assigned_department;

        return $this;
    }

    /**
     * Gets ticket
     *
     * @return float
     */
    public function getTicket()
    {
        return $this->container['ticket'];
    }

    /**
     * Sets ticket
     *
     * @param float $ticket ticket
     *
     * @return $this
     */
    public function setTicket($ticket)
    {
        $this->container['ticket'] = $ticket;

        return $this;
    }

    /**
     * Gets tickets
     *
     * @return string[]
     */
    public function getTickets()
    {
        return $this->container['tickets'];
    }

    /**
     * Sets tickets
     *
     * @param string[] $tickets tickets
     *
     * @return $this
     */
    public function setTickets($tickets)
    {
        $this->container['tickets'] = $tickets;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return string[]
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param string[] $labels labels
     *
     * @return $this
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


