<?php
/*
 * DeskPRO (r) has been developed by DeskPRO Ltd. https://www.deskpro.com/
 * a British company located in London, England.
 *
 * All source code and content Copyright (c) 2017, DeskPRO Ltd.
 *
 * The license agreement under which this software is released
 * can be found at https://www.deskpro.com/eula/
 *
 * By using this software, you acknowledge having read the license
 * and agree to be bound thereby.
 *
 * Please note that DeskPRO is not free software. We release the full
 * source code for our software because we trust our users to pay us for
 * the huge investment in time and energy that has gone into both creating
 * this software and supporting our customers. By providing the source code
 * we preserve our customers' ability to modify, audit and learn from our
 * work. We have been developing DeskPRO since 2001, please help us make it
 * another decade.
 *
 * Like the work you see? Think you could make it better? We are always
 * looking for great developers to join us: http://www.deskpro.com/jobs/
 *
 * ~ Thanks, Everyone at Team DeskPRO
 */

/**
 * GeneralSettingsType
 *
 * PHP version 5
 *
 * @category Class
 * @package  DeskPRO\API
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DeskPRO API
 *
 * DeskPRO API
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DeskPRO\API\Model;

use \ArrayAccess;
use \DeskPRO\API\ObjectSerializer;

/**
 * GeneralSettingsType Class Doc Comment
 *
 * @category Class
 * @package  DeskPRO\API
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GeneralSettingsType implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GeneralSettingsType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'site_name' => 'string',
        'brand_name' => 'string',
        'site_url' => 'string',
        'deskpro_name' => 'string',
        'deskpro_url' => 'string',
        'apps_feedback' => 'bool',
        'apps_kb' => 'bool',
        'apps_news' => 'bool',
        'apps_downloads' => 'bool',
        'apps_guides' => 'bool',
        'iface_portal' => 'bool',
        'iface_widget' => 'bool',
        'show_ratings' => 'bool',
        'show_ratings_min_votes' => 'int',
        'publish_comments' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'site_name' => null,
        'brand_name' => null,
        'site_url' => null,
        'deskpro_name' => null,
        'deskpro_url' => null,
        'apps_feedback' => null,
        'apps_kb' => null,
        'apps_news' => null,
        'apps_downloads' => null,
        'apps_guides' => null,
        'iface_portal' => null,
        'iface_widget' => null,
        'show_ratings' => null,
        'show_ratings_min_votes' => null,
        'publish_comments' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'site_name' => 'site_name',
        'brand_name' => 'brand_name',
        'site_url' => 'site_url',
        'deskpro_name' => 'deskpro_name',
        'deskpro_url' => 'deskpro_url',
        'apps_feedback' => 'apps_feedback',
        'apps_kb' => 'apps_kb',
        'apps_news' => 'apps_news',
        'apps_downloads' => 'apps_downloads',
        'apps_guides' => 'apps_guides',
        'iface_portal' => 'iface_portal',
        'iface_widget' => 'iface_widget',
        'show_ratings' => 'show_ratings',
        'show_ratings_min_votes' => 'show_ratings_min_votes',
        'publish_comments' => 'publish_comments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'site_name' => 'setSiteName',
        'brand_name' => 'setBrandName',
        'site_url' => 'setSiteUrl',
        'deskpro_name' => 'setDeskproName',
        'deskpro_url' => 'setDeskproUrl',
        'apps_feedback' => 'setAppsFeedback',
        'apps_kb' => 'setAppsKb',
        'apps_news' => 'setAppsNews',
        'apps_downloads' => 'setAppsDownloads',
        'apps_guides' => 'setAppsGuides',
        'iface_portal' => 'setIfacePortal',
        'iface_widget' => 'setIfaceWidget',
        'show_ratings' => 'setShowRatings',
        'show_ratings_min_votes' => 'setShowRatingsMinVotes',
        'publish_comments' => 'setPublishComments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'site_name' => 'getSiteName',
        'brand_name' => 'getBrandName',
        'site_url' => 'getSiteUrl',
        'deskpro_name' => 'getDeskproName',
        'deskpro_url' => 'getDeskproUrl',
        'apps_feedback' => 'getAppsFeedback',
        'apps_kb' => 'getAppsKb',
        'apps_news' => 'getAppsNews',
        'apps_downloads' => 'getAppsDownloads',
        'apps_guides' => 'getAppsGuides',
        'iface_portal' => 'getIfacePortal',
        'iface_widget' => 'getIfaceWidget',
        'show_ratings' => 'getShowRatings',
        'show_ratings_min_votes' => 'getShowRatingsMinVotes',
        'publish_comments' => 'getPublishComments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['site_name'] = isset($data['site_name']) ? $data['site_name'] : null;
        $this->container['brand_name'] = isset($data['brand_name']) ? $data['brand_name'] : null;
        $this->container['site_url'] = isset($data['site_url']) ? $data['site_url'] : null;
        $this->container['deskpro_name'] = isset($data['deskpro_name']) ? $data['deskpro_name'] : null;
        $this->container['deskpro_url'] = isset($data['deskpro_url']) ? $data['deskpro_url'] : null;
        $this->container['apps_feedback'] = isset($data['apps_feedback']) ? $data['apps_feedback'] : null;
        $this->container['apps_kb'] = isset($data['apps_kb']) ? $data['apps_kb'] : null;
        $this->container['apps_news'] = isset($data['apps_news']) ? $data['apps_news'] : null;
        $this->container['apps_downloads'] = isset($data['apps_downloads']) ? $data['apps_downloads'] : null;
        $this->container['apps_guides'] = isset($data['apps_guides']) ? $data['apps_guides'] : null;
        $this->container['iface_portal'] = isset($data['iface_portal']) ? $data['iface_portal'] : null;
        $this->container['iface_widget'] = isset($data['iface_widget']) ? $data['iface_widget'] : null;
        $this->container['show_ratings'] = isset($data['show_ratings']) ? $data['show_ratings'] : null;
        $this->container['show_ratings_min_votes'] = isset($data['show_ratings_min_votes']) ? $data['show_ratings_min_votes'] : null;
        $this->container['publish_comments'] = isset($data['publish_comments']) ? $data['publish_comments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets site_name
     *
     * @return string
     */
    public function getSiteName()
    {
        return $this->container['site_name'];
    }

    /**
     * Sets site_name
     *
     * @param string $site_name site_name
     *
     * @return $this
     */
    public function setSiteName($site_name)
    {
        $this->container['site_name'] = $site_name;

        return $this;
    }

    /**
     * Gets brand_name
     *
     * @return string
     */
    public function getBrandName()
    {
        return $this->container['brand_name'];
    }

    /**
     * Sets brand_name
     *
     * @param string $brand_name brand_name
     *
     * @return $this
     */
    public function setBrandName($brand_name)
    {
        $this->container['brand_name'] = $brand_name;

        return $this;
    }

    /**
     * Gets site_url
     *
     * @return string
     */
    public function getSiteUrl()
    {
        return $this->container['site_url'];
    }

    /**
     * Sets site_url
     *
     * @param string $site_url site_url
     *
     * @return $this
     */
    public function setSiteUrl($site_url)
    {
        $this->container['site_url'] = $site_url;

        return $this;
    }

    /**
     * Gets deskpro_name
     *
     * @return string
     */
    public function getDeskproName()
    {
        return $this->container['deskpro_name'];
    }

    /**
     * Sets deskpro_name
     *
     * @param string $deskpro_name deskpro_name
     *
     * @return $this
     */
    public function setDeskproName($deskpro_name)
    {
        $this->container['deskpro_name'] = $deskpro_name;

        return $this;
    }

    /**
     * Gets deskpro_url
     *
     * @return string
     */
    public function getDeskproUrl()
    {
        return $this->container['deskpro_url'];
    }

    /**
     * Sets deskpro_url
     *
     * @param string $deskpro_url deskpro_url
     *
     * @return $this
     */
    public function setDeskproUrl($deskpro_url)
    {
        $this->container['deskpro_url'] = $deskpro_url;

        return $this;
    }

    /**
     * Gets apps_feedback
     *
     * @return bool
     */
    public function getAppsFeedback()
    {
        return $this->container['apps_feedback'];
    }

    /**
     * Sets apps_feedback
     *
     * @param bool $apps_feedback apps_feedback
     *
     * @return $this
     */
    public function setAppsFeedback($apps_feedback)
    {
        $this->container['apps_feedback'] = $apps_feedback;

        return $this;
    }

    /**
     * Gets apps_kb
     *
     * @return bool
     */
    public function getAppsKb()
    {
        return $this->container['apps_kb'];
    }

    /**
     * Sets apps_kb
     *
     * @param bool $apps_kb apps_kb
     *
     * @return $this
     */
    public function setAppsKb($apps_kb)
    {
        $this->container['apps_kb'] = $apps_kb;

        return $this;
    }

    /**
     * Gets apps_news
     *
     * @return bool
     */
    public function getAppsNews()
    {
        return $this->container['apps_news'];
    }

    /**
     * Sets apps_news
     *
     * @param bool $apps_news apps_news
     *
     * @return $this
     */
    public function setAppsNews($apps_news)
    {
        $this->container['apps_news'] = $apps_news;

        return $this;
    }

    /**
     * Gets apps_downloads
     *
     * @return bool
     */
    public function getAppsDownloads()
    {
        return $this->container['apps_downloads'];
    }

    /**
     * Sets apps_downloads
     *
     * @param bool $apps_downloads apps_downloads
     *
     * @return $this
     */
    public function setAppsDownloads($apps_downloads)
    {
        $this->container['apps_downloads'] = $apps_downloads;

        return $this;
    }

    /**
     * Gets apps_guides
     *
     * @return bool
     */
    public function getAppsGuides()
    {
        return $this->container['apps_guides'];
    }

    /**
     * Sets apps_guides
     *
     * @param bool $apps_guides apps_guides
     *
     * @return $this
     */
    public function setAppsGuides($apps_guides)
    {
        $this->container['apps_guides'] = $apps_guides;

        return $this;
    }

    /**
     * Gets iface_portal
     *
     * @return bool
     */
    public function getIfacePortal()
    {
        return $this->container['iface_portal'];
    }

    /**
     * Sets iface_portal
     *
     * @param bool $iface_portal iface_portal
     *
     * @return $this
     */
    public function setIfacePortal($iface_portal)
    {
        $this->container['iface_portal'] = $iface_portal;

        return $this;
    }

    /**
     * Gets iface_widget
     *
     * @return bool
     */
    public function getIfaceWidget()
    {
        return $this->container['iface_widget'];
    }

    /**
     * Sets iface_widget
     *
     * @param bool $iface_widget iface_widget
     *
     * @return $this
     */
    public function setIfaceWidget($iface_widget)
    {
        $this->container['iface_widget'] = $iface_widget;

        return $this;
    }

    /**
     * Gets show_ratings
     *
     * @return bool
     */
    public function getShowRatings()
    {
        return $this->container['show_ratings'];
    }

    /**
     * Sets show_ratings
     *
     * @param bool $show_ratings show_ratings
     *
     * @return $this
     */
    public function setShowRatings($show_ratings)
    {
        $this->container['show_ratings'] = $show_ratings;

        return $this;
    }

    /**
     * Gets show_ratings_min_votes
     *
     * @return int
     */
    public function getShowRatingsMinVotes()
    {
        return $this->container['show_ratings_min_votes'];
    }

    /**
     * Sets show_ratings_min_votes
     *
     * @param int $show_ratings_min_votes show_ratings_min_votes
     *
     * @return $this
     */
    public function setShowRatingsMinVotes($show_ratings_min_votes)
    {
        $this->container['show_ratings_min_votes'] = $show_ratings_min_votes;

        return $this;
    }

    /**
     * Gets publish_comments
     *
     * @return bool
     */
    public function getPublishComments()
    {
        return $this->container['publish_comments'];
    }

    /**
     * Sets publish_comments
     *
     * @param bool $publish_comments publish_comments
     *
     * @return $this
     */
    public function setPublishComments($publish_comments)
    {
        $this->container['publish_comments'] = $publish_comments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


