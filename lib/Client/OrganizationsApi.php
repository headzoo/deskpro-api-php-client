<?php
/*
 * DeskPRO (r) has been developed by DeskPRO Ltd. https://www.deskpro.com/
 * a British company located in London, England.
 *
 * All source code and content Copyright (c) 2017, DeskPRO Ltd.
 *
 * The license agreement under which this software is released
 * can be found at https://www.deskpro.com/eula/
 *
 * By using this software, you acknowledge having read the license
 * and agree to be bound thereby.
 *
 * Please note that DeskPRO is not free software. We release the full
 * source code for our software because we trust our users to pay us for
 * the huge investment in time and energy that has gone into both creating
 * this software and supporting our customers. By providing the source code
 * we preserve our customers' ability to modify, audit and learn from our
 * work. We have been developing DeskPRO since 2001, please help us make it
 * another decade.
 *
 * Like the work you see? Think you could make it better? We are always
 * looking for great developers to join us: http://www.deskpro.com/jobs/
 *
 * ~ Thanks, Everyone at Team DeskPRO
 */

/**
 * OrganizationsApi
 * PHP version 5
 *
 * @category Class
 * @package  DeskPRO\API
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DeskPRO API
 *
 * DeskPRO API
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DeskPRO\API\Client;

use Psr\Http\Message\ResponseInterface;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use DeskPRO\API\ApiException;
use DeskPRO\API\Configuration;
use DeskPRO\API\HeaderSelector;
use DeskPRO\API\ObjectSerializer;

/**
 * OrganizationsApi Class Doc Comment
 *
 * @category Class
 * @package  DeskPRO\API
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrganizationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;
    
    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        Configuration $config = null,
        ClientInterface $client = null,
        HeaderSelector $selector = null
    ) {
        $this->config = $config ?: new Configuration();
        $this->client = $client ?: new Client();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteOrganizationById
     *
     *
     * @param int $id The id of the resource
     *
     * @throws \DeskPRO\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DeskPRO\API\Model\Response
     */
    public function deleteOrganizationById($id)
    {
        list($response) = $this->deleteOrganizationByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteOrganizationByIdWithHttpInfo
     *
     *
     * @param int $id The id of the resource
     *
     * @throws \DeskPRO\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DeskPRO\API\Model\Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOrganizationByIdWithHttpInfo($id)
    {
        $returnType = '\DeskPRO\API\Model\Response';
        $request = $this->deleteOrganizationByIdRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DeskPRO\API\Model\Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DeskPRO\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOrganizationByIdAsync
     *
     * 
     *
     *
     * @param int $id The id of the resource
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrganizationByIdAsync($id)
    {
        return $this->deleteOrganizationByIdAsyncWithHttpInfo($id)
            ->then(
                function (array $response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOrganizationByIdAsyncWithHttpInfo
     *
     * 
     *
     *
     * @param int $id The id of the resource
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrganizationByIdAsyncWithHttpInfo($id)
    {
        $returnType = '\DeskPRO\API\Model\Response';
        $request = $this->deleteOrganizationByIdRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function (ResponseInterface $response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                                        if (isset($content->data)) {
                                            $content = $content->data;
                                        }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOrganizationById'
     *
     *
     * @param int $id The id of the resource
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteOrganizationByIdRequest($id)
    {
        if (empty($id)) {
            throw new \InvalidArgumentException('Missing parameter "$id" in OrganizationsApi::deleteOrganizationByIdRequest().');
        }
        

        $resourcePath = '/organizations/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($id !== null) {
            $id = ObjectSerializer::toQueryValue($id);
        }
        

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOrganizationByParentIdMemberByPerson
     *
     * Filters:
     *   "id" string   (optional)
     *
     * @param string $parent_id 
     * @param string $person 
     * @param array $filters API endpoint parameters
     *
     * @throws \DeskPRO\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DeskPRO\API\Model\Response
     */
    public function deleteOrganizationByParentIdMemberByPerson($parent_id, $person, array $filters = [])
    {
        list($response) = $this->deleteOrganizationByParentIdMemberByPersonWithHttpInfo($parent_id, $person, $filters);
        return $response;
    }

    /**
     * Operation deleteOrganizationByParentIdMemberByPersonWithHttpInfo
     *
     * Filters:
     *   "id" string   (optional)
     *
     * @param string $parent_id 
     * @param string $person 
     * @param array $filters API endpoint parameters
     *
     * @throws \DeskPRO\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DeskPRO\API\Model\Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOrganizationByParentIdMemberByPersonWithHttpInfo($parent_id, $person, array $filters = [])
    {
        $returnType = '\DeskPRO\API\Model\Response';
        $request = $this->deleteOrganizationByParentIdMemberByPersonRequest($parent_id, $person, $filters);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DeskPRO\API\Model\Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOrganizationByParentIdMemberByPersonAsync
     *
     * 
     *
     * Filters:
     *   "id" string   (optional)
     *
     * @param string $parent_id 
     * @param string $person 
     * @param array $filters API endpoint parameters
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrganizationByParentIdMemberByPersonAsync($parent_id, $person, array $filters = [])
    {
        return $this->deleteOrganizationByParentIdMemberByPersonAsyncWithHttpInfo($parent_id, $person, $filters)
            ->then(
                function (array $response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOrganizationByParentIdMemberByPersonAsyncWithHttpInfo
     *
     * 
     *
     * Filters:
     *   "id" string   (optional)
     *
     * @param string $parent_id 
     * @param string $person 
     * @param array $filters API endpoint parameters
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrganizationByParentIdMemberByPersonAsyncWithHttpInfo($parent_id, $person, array $filters = [])
    {
        $returnType = '\DeskPRO\API\Model\Response';
        $request = $this->deleteOrganizationByParentIdMemberByPersonRequest($parent_id, $person, $filters);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function (ResponseInterface $response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                                        if (isset($content->data)) {
                                            $content = $content->data;
                                        }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOrganizationByParentIdMemberByPerson'
     *
     * Filters:
     *   "id" string   (optional)
     *
     * @param string $parent_id 
     * @param string $person 
     * @param array $filters API endpoint parameters
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteOrganizationByParentIdMemberByPersonRequest($parent_id, $person, array $filters = [])
    {
        if (empty($parent_id)) {
            throw new \InvalidArgumentException('Missing parameter "$parent_id" in OrganizationsApi::deleteOrganizationByParentIdMemberByPersonRequest().');
        }
        if (empty($person)) {
            throw new \InvalidArgumentException('Missing parameter "$person" in OrganizationsApi::deleteOrganizationByParentIdMemberByPersonRequest().');
        }
        if (!isset($filters['id'])) {
            $filters['id'] = null;
        }
        

        $resourcePath = '/organizations/{parentId}/members/{person}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($parent_id !== null) {
            $parent_id = ObjectSerializer::toQueryValue($parent_id);
        }
        if ($person !== null) {
            $person = ObjectSerializer::toQueryValue($person);
        }
        
        // query params
        if ($filters['id'] !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($filters['id']);
        }

        // path params
        if ($parent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'parentId' . '}',
                ObjectSerializer::toPathValue($parent_id),
                $resourcePath
            );
        }
        // path params
        if ($person !== null) {
            $resourcePath = str_replace(
                '{' . 'person' . '}',
                ObjectSerializer::toPathValue($person),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOrganizationByParentIdNoteById
     *
     *
     * @param int $id The id of the resource
     * @param string $parent_id 
     *
     * @throws \DeskPRO\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DeskPRO\API\Model\Response
     */
    public function deleteOrganizationByParentIdNoteById($id, $parent_id)
    {
        list($response) = $this->deleteOrganizationByParentIdNoteByIdWithHttpInfo($id, $parent_id);
        return $response;
    }

    /**
     * Operation deleteOrganizationByParentIdNoteByIdWithHttpInfo
     *
     *
     * @param int $id The id of the resource
     * @param string $parent_id 
     *
     * @throws \DeskPRO\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DeskPRO\API\Model\Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOrganizationByParentIdNoteByIdWithHttpInfo($id, $parent_id)
    {
        $returnType = '\DeskPRO\API\Model\Response';
        $request = $this->deleteOrganizationByParentIdNoteByIdRequest($id, $parent_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DeskPRO\API\Model\Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DeskPRO\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOrganizationByParentIdNoteByIdAsync
     *
     * 
     *
     *
     * @param int $id The id of the resource
     * @param string $parent_id 
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrganizationByParentIdNoteByIdAsync($id, $parent_id)
    {
        return $this->deleteOrganizationByParentIdNoteByIdAsyncWithHttpInfo($id, $parent_id)
            ->then(
                function (array $response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOrganizationByParentIdNoteByIdAsyncWithHttpInfo
     *
     * 
     *
     *
     * @param int $id The id of the resource
     * @param string $parent_id 
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrganizationByParentIdNoteByIdAsyncWithHttpInfo($id, $parent_id)
    {
        $returnType = '\DeskPRO\API\Model\Response';
        $request = $this->deleteOrganizationByParentIdNoteByIdRequest($id, $parent_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function (ResponseInterface $response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                                        if (isset($content->data)) {
                                            $content = $content->data;
                                        }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOrganizationByParentIdNoteById'
     *
     *
     * @param int $id The id of the resource
     * @param string $parent_id 
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteOrganizationByParentIdNoteByIdRequest($id, $parent_id)
    {
        if (empty($id)) {
            throw new \InvalidArgumentException('Missing parameter "$id" in OrganizationsApi::deleteOrganizationByParentIdNoteByIdRequest().');
        }
        if (empty($parent_id)) {
            throw new \InvalidArgumentException('Missing parameter "$parent_id" in OrganizationsApi::deleteOrganizationByParentIdNoteByIdRequest().');
        }
        

        $resourcePath = '/organizations/{parentId}/notes/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($id !== null) {
            $id = ObjectSerializer::toQueryValue($id);
        }
        if ($parent_id !== null) {
            $parent_id = ObjectSerializer::toQueryValue($parent_id);
        }
        

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($parent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'parentId' . '}',
                ObjectSerializer::toPathValue($parent_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOrganizationCustomFieldById
     *
     *
     * @param int $id The id of the resource
     *
     * @throws \DeskPRO\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DeskPRO\API\Model\Response
     */
    public function deleteOrganizationCustomFieldById($id)
    {
        list($response) = $this->deleteOrganizationCustomFieldByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteOrganizationCustomFieldByIdWithHttpInfo
     *
     *
     * @param int $id The id of the resource
     *
     * @throws \DeskPRO\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DeskPRO\API\Model\Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOrganizationCustomFieldByIdWithHttpInfo($id)
    {
        $returnType = '\DeskPRO\API\Model\Response';
        $request = $this->deleteOrganizationCustomFieldByIdRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DeskPRO\API\Model\Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DeskPRO\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOrganizationCustomFieldByIdAsync
     *
     * 
     *
     *
     * @param int $id The id of the resource
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrganizationCustomFieldByIdAsync($id)
    {
        return $this->deleteOrganizationCustomFieldByIdAsyncWithHttpInfo($id)
            ->then(
                function (array $response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOrganizationCustomFieldByIdAsyncWithHttpInfo
     *
     * 
     *
     *
     * @param int $id The id of the resource
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrganizationCustomFieldByIdAsyncWithHttpInfo($id)
    {
        $returnType = '\DeskPRO\API\Model\Response';
        $request = $this->deleteOrganizationCustomFieldByIdRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function (ResponseInterface $response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                                        if (isset($content->data)) {
                                            $content = $content->data;
                                        }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOrganizationCustomFieldById'
     *
     *
     * @param int $id The id of the resource
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteOrganizationCustomFieldByIdRequest($id)
    {
        if (empty($id)) {
            throw new \InvalidArgumentException('Missing parameter "$id" in OrganizationsApi::deleteOrganizationCustomFieldByIdRequest().');
        }
        

        $resourcePath = '/organization_custom_fields/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($id !== null) {
            $id = ObjectSerializer::toQueryValue($id);
        }
        

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationById
     *
     *
     * @param int $id The id of the resource
     *
     * @throws \DeskPRO\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DeskPRO\API\Model\Response
     */
    public function getOrganizationById($id)
    {
        list($response) = $this->getOrganizationByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getOrganizationByIdWithHttpInfo
     *
     *
     * @param int $id The id of the resource
     *
     * @throws \DeskPRO\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DeskPRO\API\Model\Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationByIdWithHttpInfo($id)
    {
        $returnType = '\DeskPRO\API\Model\Response';
        $request = $this->getOrganizationByIdRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DeskPRO\API\Model\Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DeskPRO\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationByIdAsync
     *
     * 
     *
     *
     * @param int $id The id of the resource
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationByIdAsync($id)
    {
        return $this->getOrganizationByIdAsyncWithHttpInfo($id)
            ->then(
                function (array $response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationByIdAsyncWithHttpInfo
     *
     * 
     *
     *
     * @param int $id The id of the resource
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationByIdAsyncWithHttpInfo($id)
    {
        $returnType = '\DeskPRO\API\Model\Response';
        $request = $this->getOrganizationByIdRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function (ResponseInterface $response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                                        if (isset($content->data)) {
                                            $content = $content->data;
                                        }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationById'
     *
     *
     * @param int $id The id of the resource
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrganizationByIdRequest($id)
    {
        if (empty($id)) {
            throw new \InvalidArgumentException('Missing parameter "$id" in OrganizationsApi::getOrganizationByIdRequest().');
        }
        

        $resourcePath = '/organizations/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($id !== null) {
            $id = ObjectSerializer::toQueryValue($id);
        }
        

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationByIdTicket
     *
     *
     * @param string $id 
     *
     * @throws \DeskPRO\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DeskPRO\API\Model\Response
     */
    public function getOrganizationByIdTicket($id)
    {
        list($response) = $this->getOrganizationByIdTicketWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getOrganizationByIdTicketWithHttpInfo
     *
     *
     * @param string $id 
     *
     * @throws \DeskPRO\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DeskPRO\API\Model\Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationByIdTicketWithHttpInfo($id)
    {
        $returnType = '\DeskPRO\API\Model\Response';
        $request = $this->getOrganizationByIdTicketRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DeskPRO\API\Model\Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DeskPRO\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationByIdTicketAsync
     *
     * 
     *
     *
     * @param string $id 
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationByIdTicketAsync($id)
    {
        return $this->getOrganizationByIdTicketAsyncWithHttpInfo($id)
            ->then(
                function (array $response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationByIdTicketAsyncWithHttpInfo
     *
     * 
     *
     *
     * @param string $id 
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationByIdTicketAsyncWithHttpInfo($id)
    {
        $returnType = '\DeskPRO\API\Model\Response';
        $request = $this->getOrganizationByIdTicketRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function (ResponseInterface $response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                                        if (isset($content->data)) {
                                            $content = $content->data;
                                        }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationByIdTicket'
     *
     *
     * @param string $id 
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrganizationByIdTicketRequest($id)
    {
        if (empty($id)) {
            throw new \InvalidArgumentException('Missing parameter "$id" in OrganizationsApi::getOrganizationByIdTicketRequest().');
        }
        

        $resourcePath = '/organizations/{id}/tickets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($id !== null) {
            $id = ObjectSerializer::toQueryValue($id);
        }
        

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationByParentIdContactData
     *
     * Filters:
     *   "page" int  Which page to display (optional)
     *   "count" int  Resource per page count (optional)
     *   "limit" int  Max number of resources to return (optional)
     *   "ids" string  Comma separated list of IDs (optional)
     *
     * @param string $parent_id 
     * @param array $filters API endpoint parameters
     *
     * @throws \DeskPRO\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DeskPRO\API\Model\Response
     */
    public function getOrganizationByParentIdContactData($parent_id, array $filters = [])
    {
        list($response) = $this->getOrganizationByParentIdContactDataWithHttpInfo($parent_id, $filters);
        return $response;
    }

    /**
     * Operation getOrganizationByParentIdContactDataWithHttpInfo
     *
     * Filters:
     *   "page" int  Which page to display (optional)
     *   "count" int  Resource per page count (optional)
     *   "limit" int  Max number of resources to return (optional)
     *   "ids" string  Comma separated list of IDs (optional)
     *
     * @param string $parent_id 
     * @param array $filters API endpoint parameters
     *
     * @throws \DeskPRO\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DeskPRO\API\Model\Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationByParentIdContactDataWithHttpInfo($parent_id, array $filters = [])
    {
        $returnType = '\DeskPRO\API\Model\Response';
        $request = $this->getOrganizationByParentIdContactDataRequest($parent_id, $filters);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DeskPRO\API\Model\Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DeskPRO\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationByParentIdContactDataAsync
     *
     * 
     *
     * Filters:
     *   "page" int  Which page to display (optional)
     *   "count" int  Resource per page count (optional)
     *   "limit" int  Max number of resources to return (optional)
     *   "ids" string  Comma separated list of IDs (optional)
     *
     * @param string $parent_id 
     * @param array $filters API endpoint parameters
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationByParentIdContactDataAsync($parent_id, array $filters = [])
    {
        return $this->getOrganizationByParentIdContactDataAsyncWithHttpInfo($parent_id, $filters)
            ->then(
                function (array $response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationByParentIdContactDataAsyncWithHttpInfo
     *
     * 
     *
     * Filters:
     *   "page" int  Which page to display (optional)
     *   "count" int  Resource per page count (optional)
     *   "limit" int  Max number of resources to return (optional)
     *   "ids" string  Comma separated list of IDs (optional)
     *
     * @param string $parent_id 
     * @param array $filters API endpoint parameters
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationByParentIdContactDataAsyncWithHttpInfo($parent_id, array $filters = [])
    {
        $returnType = '\DeskPRO\API\Model\Response';
        $request = $this->getOrganizationByParentIdContactDataRequest($parent_id, $filters);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function (ResponseInterface $response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                                        if (isset($content->data)) {
                                            $content = $content->data;
                                        }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationByParentIdContactData'
     *
     * Filters:
     *   "page" int  Which page to display (optional)
     *   "count" int  Resource per page count (optional)
     *   "limit" int  Max number of resources to return (optional)
     *   "ids" string  Comma separated list of IDs (optional)
     *
     * @param string $parent_id 
     * @param array $filters API endpoint parameters
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrganizationByParentIdContactDataRequest($parent_id, array $filters = [])
    {
        if (empty($parent_id)) {
            throw new \InvalidArgumentException('Missing parameter "$parent_id" in OrganizationsApi::getOrganizationByParentIdContactDataRequest().');
        }
        if (!isset($filters['page'])) {
            $filters['page'] = null;
        }
        if (!isset($filters['count'])) {
            $filters['count'] = null;
        }
        if (!isset($filters['limit'])) {
            $filters['limit'] = null;
        }
        if (!isset($filters['ids'])) {
            $filters['ids'] = null;
        }
        

        $resourcePath = '/organizations/{parentId}/contact_data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($parent_id !== null) {
            $parent_id = ObjectSerializer::toQueryValue($parent_id);
        }
        
        // query params
        if ($filters['page'] !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($filters['page']);
        }
        // query params
        if ($filters['count'] !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($filters['count']);
        }
        // query params
        if ($filters['limit'] !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($filters['limit']);
        }
        // query params
        if ($filters['ids'] !== null) {
            $queryParams['ids'] = ObjectSerializer::toQueryValue($filters['ids']);
        }

        // path params
        if ($parent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'parentId' . '}',
                ObjectSerializer::toPathValue($parent_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationByParentIdContactDataById
     *
     *
     * @param int $id The id of the resource
     * @param string $parent_id 
     *
     * @throws \DeskPRO\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DeskPRO\API\Model\Response
     */
    public function getOrganizationByParentIdContactDataById($id, $parent_id)
    {
        list($response) = $this->getOrganizationByParentIdContactDataByIdWithHttpInfo($id, $parent_id);
        return $response;
    }

    /**
     * Operation getOrganizationByParentIdContactDataByIdWithHttpInfo
     *
     *
     * @param int $id The id of the resource
     * @param string $parent_id 
     *
     * @throws \DeskPRO\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DeskPRO\API\Model\Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationByParentIdContactDataByIdWithHttpInfo($id, $parent_id)
    {
        $returnType = '\DeskPRO\API\Model\Response';
        $request = $this->getOrganizationByParentIdContactDataByIdRequest($id, $parent_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DeskPRO\API\Model\Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DeskPRO\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationByParentIdContactDataByIdAsync
     *
     * 
     *
     *
     * @param int $id The id of the resource
     * @param string $parent_id 
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationByParentIdContactDataByIdAsync($id, $parent_id)
    {
        return $this->getOrganizationByParentIdContactDataByIdAsyncWithHttpInfo($id, $parent_id)
            ->then(
                function (array $response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationByParentIdContactDataByIdAsyncWithHttpInfo
     *
     * 
     *
     *
     * @param int $id The id of the resource
     * @param string $parent_id 
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationByParentIdContactDataByIdAsyncWithHttpInfo($id, $parent_id)
    {
        $returnType = '\DeskPRO\API\Model\Response';
        $request = $this->getOrganizationByParentIdContactDataByIdRequest($id, $parent_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function (ResponseInterface $response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                                        if (isset($content->data)) {
                                            $content = $content->data;
                                        }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationByParentIdContactDataById'
     *
     *
     * @param int $id The id of the resource
     * @param string $parent_id 
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrganizationByParentIdContactDataByIdRequest($id, $parent_id)
    {
        if (empty($id)) {
            throw new \InvalidArgumentException('Missing parameter "$id" in OrganizationsApi::getOrganizationByParentIdContactDataByIdRequest().');
        }
        if (empty($parent_id)) {
            throw new \InvalidArgumentException('Missing parameter "$parent_id" in OrganizationsApi::getOrganizationByParentIdContactDataByIdRequest().');
        }
        

        $resourcePath = '/organizations/{parentId}/contact_data/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($id !== null) {
            $id = ObjectSerializer::toQueryValue($id);
        }
        if ($parent_id !== null) {
            $parent_id = ObjectSerializer::toQueryValue($parent_id);
        }
        

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($parent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'parentId' . '}',
                ObjectSerializer::toPathValue($parent_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationByParentIdContactDataCount
     *
     *
     * @param string $parent_id 
     *
     * @throws \DeskPRO\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DeskPRO\API\Model\Response
     */
    public function getOrganizationByParentIdContactDataCount($parent_id)
    {
        list($response) = $this->getOrganizationByParentIdContactDataCountWithHttpInfo($parent_id);
        return $response;
    }

    /**
     * Operation getOrganizationByParentIdContactDataCountWithHttpInfo
     *
     *
     * @param string $parent_id 
     *
     * @throws \DeskPRO\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DeskPRO\API\Model\Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationByParentIdContactDataCountWithHttpInfo($parent_id)
    {
        $returnType = '\DeskPRO\API\Model\Response';
        $request = $this->getOrganizationByParentIdContactDataCountRequest($parent_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DeskPRO\API\Model\Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DeskPRO\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationByParentIdContactDataCountAsync
     *
     * 
     *
     *
     * @param string $parent_id 
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationByParentIdContactDataCountAsync($parent_id)
    {
        return $this->getOrganizationByParentIdContactDataCountAsyncWithHttpInfo($parent_id)
            ->then(
                function (array $response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationByParentIdContactDataCountAsyncWithHttpInfo
     *
     * 
     *
     *
     * @param string $parent_id 
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationByParentIdContactDataCountAsyncWithHttpInfo($parent_id)
    {
        $returnType = '\DeskPRO\API\Model\Response';
        $request = $this->getOrganizationByParentIdContactDataCountRequest($parent_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function (ResponseInterface $response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                                        if (isset($content->data)) {
                                            $content = $content->data;
                                        }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationByParentIdContactDataCount'
     *
     *
     * @param string $parent_id 
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrganizationByParentIdContactDataCountRequest($parent_id)
    {
        if (empty($parent_id)) {
            throw new \InvalidArgumentException('Missing parameter "$parent_id" in OrganizationsApi::getOrganizationByParentIdContactDataCountRequest().');
        }
        

        $resourcePath = '/organizations/{parentId}/contact_data/counts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($parent_id !== null) {
            $parent_id = ObjectSerializer::toQueryValue($parent_id);
        }
        

        // path params
        if ($parent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'parentId' . '}',
                ObjectSerializer::toPathValue($parent_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationByParentIdMember
     *
     * Filters:
     *   "page" int  Which page to display (optional)
     *   "count" int  Resource per page count (optional)
     *   "limit" int  Max number of resources to return (optional)
     *   "ids" string  Comma separated list of IDs (optional)
     *
     * @param string $parent_id 
     * @param array $filters API endpoint parameters
     *
     * @throws \DeskPRO\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DeskPRO\API\Model\Response
     */
    public function getOrganizationByParentIdMember($parent_id, array $filters = [])
    {
        list($response) = $this->getOrganizationByParentIdMemberWithHttpInfo($parent_id, $filters);
        return $response;
    }

    /**
     * Operation getOrganizationByParentIdMemberWithHttpInfo
     *
     * Filters:
     *   "page" int  Which page to display (optional)
     *   "count" int  Resource per page count (optional)
     *   "limit" int  Max number of resources to return (optional)
     *   "ids" string  Comma separated list of IDs (optional)
     *
     * @param string $parent_id 
     * @param array $filters API endpoint parameters
     *
     * @throws \DeskPRO\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DeskPRO\API\Model\Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationByParentIdMemberWithHttpInfo($parent_id, array $filters = [])
    {
        $returnType = '\DeskPRO\API\Model\Response';
        $request = $this->getOrganizationByParentIdMemberRequest($parent_id, $filters);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DeskPRO\API\Model\Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DeskPRO\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationByParentIdMemberAsync
     *
     * 
     *
     * Filters:
     *   "page" int  Which page to display (optional)
     *   "count" int  Resource per page count (optional)
     *   "limit" int  Max number of resources to return (optional)
     *   "ids" string  Comma separated list of IDs (optional)
     *
     * @param string $parent_id 
     * @param array $filters API endpoint parameters
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationByParentIdMemberAsync($parent_id, array $filters = [])
    {
        return $this->getOrganizationByParentIdMemberAsyncWithHttpInfo($parent_id, $filters)
            ->then(
                function (array $response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationByParentIdMemberAsyncWithHttpInfo
     *
     * 
     *
     * Filters:
     *   "page" int  Which page to display (optional)
     *   "count" int  Resource per page count (optional)
     *   "limit" int  Max number of resources to return (optional)
     *   "ids" string  Comma separated list of IDs (optional)
     *
     * @param string $parent_id 
     * @param array $filters API endpoint parameters
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationByParentIdMemberAsyncWithHttpInfo($parent_id, array $filters = [])
    {
        $returnType = '\DeskPRO\API\Model\Response';
        $request = $this->getOrganizationByParentIdMemberRequest($parent_id, $filters);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function (ResponseInterface $response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                                        if (isset($content->data)) {
                                            $content = $content->data;
                                        }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationByParentIdMember'
     *
     * Filters:
     *   "page" int  Which page to display (optional)
     *   "count" int  Resource per page count (optional)
     *   "limit" int  Max number of resources to return (optional)
     *   "ids" string  Comma separated list of IDs (optional)
     *
     * @param string $parent_id 
     * @param array $filters API endpoint parameters
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrganizationByParentIdMemberRequest($parent_id, array $filters = [])
    {
        if (empty($parent_id)) {
            throw new \InvalidArgumentException('Missing parameter "$parent_id" in OrganizationsApi::getOrganizationByParentIdMemberRequest().');
        }
        if (!isset($filters['page'])) {
            $filters['page'] = null;
        }
        if (!isset($filters['count'])) {
            $filters['count'] = null;
        }
        if (!isset($filters['limit'])) {
            $filters['limit'] = null;
        }
        if (!isset($filters['ids'])) {
            $filters['ids'] = null;
        }
        

        $resourcePath = '/organizations/{parentId}/members';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($parent_id !== null) {
            $parent_id = ObjectSerializer::toQueryValue($parent_id);
        }
        
        // query params
        if ($filters['page'] !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($filters['page']);
        }
        // query params
        if ($filters['count'] !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($filters['count']);
        }
        // query params
        if ($filters['limit'] !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($filters['limit']);
        }
        // query params
        if ($filters['ids'] !== null) {
            $queryParams['ids'] = ObjectSerializer::toQueryValue($filters['ids']);
        }

        // path params
        if ($parent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'parentId' . '}',
                ObjectSerializer::toPathValue($parent_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationByParentIdNote
     *
     * Filters:
     *   "page" int  Which page to display (optional)
     *   "count" int  Resource per page count (optional)
     *   "limit" int  Max number of resources to return (optional)
     *   "ids" string  Comma separated list of IDs (optional)
     *
     * @param string $parent_id 
     * @param array $filters API endpoint parameters
     *
     * @throws \DeskPRO\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DeskPRO\API\Model\Response
     */
    public function getOrganizationByParentIdNote($parent_id, array $filters = [])
    {
        list($response) = $this->getOrganizationByParentIdNoteWithHttpInfo($parent_id, $filters);
        return $response;
    }

    /**
     * Operation getOrganizationByParentIdNoteWithHttpInfo
     *
     * Filters:
     *   "page" int  Which page to display (optional)
     *   "count" int  Resource per page count (optional)
     *   "limit" int  Max number of resources to return (optional)
     *   "ids" string  Comma separated list of IDs (optional)
     *
     * @param string $parent_id 
     * @param array $filters API endpoint parameters
     *
     * @throws \DeskPRO\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DeskPRO\API\Model\Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationByParentIdNoteWithHttpInfo($parent_id, array $filters = [])
    {
        $returnType = '\DeskPRO\API\Model\Response';
        $request = $this->getOrganizationByParentIdNoteRequest($parent_id, $filters);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DeskPRO\API\Model\Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DeskPRO\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationByParentIdNoteAsync
     *
     * 
     *
     * Filters:
     *   "page" int  Which page to display (optional)
     *   "count" int  Resource per page count (optional)
     *   "limit" int  Max number of resources to return (optional)
     *   "ids" string  Comma separated list of IDs (optional)
     *
     * @param string $parent_id 
     * @param array $filters API endpoint parameters
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationByParentIdNoteAsync($parent_id, array $filters = [])
    {
        return $this->getOrganizationByParentIdNoteAsyncWithHttpInfo($parent_id, $filters)
            ->then(
                function (array $response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationByParentIdNoteAsyncWithHttpInfo
     *
     * 
     *
     * Filters:
     *   "page" int  Which page to display (optional)
     *   "count" int  Resource per page count (optional)
     *   "limit" int  Max number of resources to return (optional)
     *   "ids" string  Comma separated list of IDs (optional)
     *
     * @param string $parent_id 
     * @param array $filters API endpoint parameters
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationByParentIdNoteAsyncWithHttpInfo($parent_id, array $filters = [])
    {
        $returnType = '\DeskPRO\API\Model\Response';
        $request = $this->getOrganizationByParentIdNoteRequest($parent_id, $filters);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function (ResponseInterface $response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                                        if (isset($content->data)) {
                                            $content = $content->data;
                                        }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationByParentIdNote'
     *
     * Filters:
     *   "page" int  Which page to display (optional)
     *   "count" int  Resource per page count (optional)
     *   "limit" int  Max number of resources to return (optional)
     *   "ids" string  Comma separated list of IDs (optional)
     *
     * @param string $parent_id 
     * @param array $filters API endpoint parameters
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrganizationByParentIdNoteRequest($parent_id, array $filters = [])
    {
        if (empty($parent_id)) {
            throw new \InvalidArgumentException('Missing parameter "$parent_id" in OrganizationsApi::getOrganizationByParentIdNoteRequest().');
        }
        if (!isset($filters['page'])) {
            $filters['page'] = null;
        }
        if (!isset($filters['count'])) {
            $filters['count'] = null;
        }
        if (!isset($filters['limit'])) {
            $filters['limit'] = null;
        }
        if (!isset($filters['ids'])) {
            $filters['ids'] = null;
        }
        

        $resourcePath = '/organizations/{parentId}/notes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($parent_id !== null) {
            $parent_id = ObjectSerializer::toQueryValue($parent_id);
        }
        
        // query params
        if ($filters['page'] !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($filters['page']);
        }
        // query params
        if ($filters['count'] !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($filters['count']);
        }
        // query params
        if ($filters['limit'] !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($filters['limit']);
        }
        // query params
        if ($filters['ids'] !== null) {
            $queryParams['ids'] = ObjectSerializer::toQueryValue($filters['ids']);
        }

        // path params
        if ($parent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'parentId' . '}',
                ObjectSerializer::toPathValue($parent_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationByParentIdNoteById
     *
     *
     * @param int $id The id of the resource
     * @param string $parent_id 
     *
     * @throws \DeskPRO\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DeskPRO\API\Model\Response
     */
    public function getOrganizationByParentIdNoteById($id, $parent_id)
    {
        list($response) = $this->getOrganizationByParentIdNoteByIdWithHttpInfo($id, $parent_id);
        return $response;
    }

    /**
     * Operation getOrganizationByParentIdNoteByIdWithHttpInfo
     *
     *
     * @param int $id The id of the resource
     * @param string $parent_id 
     *
     * @throws \DeskPRO\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DeskPRO\API\Model\Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationByParentIdNoteByIdWithHttpInfo($id, $parent_id)
    {
        $returnType = '\DeskPRO\API\Model\Response';
        $request = $this->getOrganizationByParentIdNoteByIdRequest($id, $parent_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DeskPRO\API\Model\Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DeskPRO\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationByParentIdNoteByIdAsync
     *
     * 
     *
     *
     * @param int $id The id of the resource
     * @param string $parent_id 
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationByParentIdNoteByIdAsync($id, $parent_id)
    {
        return $this->getOrganizationByParentIdNoteByIdAsyncWithHttpInfo($id, $parent_id)
            ->then(
                function (array $response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationByParentIdNoteByIdAsyncWithHttpInfo
     *
     * 
     *
     *
     * @param int $id The id of the resource
     * @param string $parent_id 
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationByParentIdNoteByIdAsyncWithHttpInfo($id, $parent_id)
    {
        $returnType = '\DeskPRO\API\Model\Response';
        $request = $this->getOrganizationByParentIdNoteByIdRequest($id, $parent_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function (ResponseInterface $response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                                        if (isset($content->data)) {
                                            $content = $content->data;
                                        }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationByParentIdNoteById'
     *
     *
     * @param int $id The id of the resource
     * @param string $parent_id 
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrganizationByParentIdNoteByIdRequest($id, $parent_id)
    {
        if (empty($id)) {
            throw new \InvalidArgumentException('Missing parameter "$id" in OrganizationsApi::getOrganizationByParentIdNoteByIdRequest().');
        }
        if (empty($parent_id)) {
            throw new \InvalidArgumentException('Missing parameter "$parent_id" in OrganizationsApi::getOrganizationByParentIdNoteByIdRequest().');
        }
        

        $resourcePath = '/organizations/{parentId}/notes/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($id !== null) {
            $id = ObjectSerializer::toQueryValue($id);
        }
        if ($parent_id !== null) {
            $parent_id = ObjectSerializer::toQueryValue($parent_id);
        }
        

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($parent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'parentId' . '}',
                ObjectSerializer::toPathValue($parent_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationByParentIdNoteCount
     *
     *
     * @param string $parent_id 
     *
     * @throws \DeskPRO\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DeskPRO\API\Model\Response
     */
    public function getOrganizationByParentIdNoteCount($parent_id)
    {
        list($response) = $this->getOrganizationByParentIdNoteCountWithHttpInfo($parent_id);
        return $response;
    }

    /**
     * Operation getOrganizationByParentIdNoteCountWithHttpInfo
     *
     *
     * @param string $parent_id 
     *
     * @throws \DeskPRO\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DeskPRO\API\Model\Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationByParentIdNoteCountWithHttpInfo($parent_id)
    {
        $returnType = '\DeskPRO\API\Model\Response';
        $request = $this->getOrganizationByParentIdNoteCountRequest($parent_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DeskPRO\API\Model\Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DeskPRO\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationByParentIdNoteCountAsync
     *
     * 
     *
     *
     * @param string $parent_id 
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationByParentIdNoteCountAsync($parent_id)
    {
        return $this->getOrganizationByParentIdNoteCountAsyncWithHttpInfo($parent_id)
            ->then(
                function (array $response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationByParentIdNoteCountAsyncWithHttpInfo
     *
     * 
     *
     *
     * @param string $parent_id 
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationByParentIdNoteCountAsyncWithHttpInfo($parent_id)
    {
        $returnType = '\DeskPRO\API\Model\Response';
        $request = $this->getOrganizationByParentIdNoteCountRequest($parent_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function (ResponseInterface $response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                                        if (isset($content->data)) {
                                            $content = $content->data;
                                        }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationByParentIdNoteCount'
     *
     *
     * @param string $parent_id 
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrganizationByParentIdNoteCountRequest($parent_id)
    {
        if (empty($parent_id)) {
            throw new \InvalidArgumentException('Missing parameter "$parent_id" in OrganizationsApi::getOrganizationByParentIdNoteCountRequest().');
        }
        

        $resourcePath = '/organizations/{parentId}/notes/counts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($parent_id !== null) {
            $parent_id = ObjectSerializer::toQueryValue($parent_id);
        }
        

        // path params
        if ($parent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'parentId' . '}',
                ObjectSerializer::toPathValue($parent_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationCount
     *
     * Filters:
     *   "name" string  name filter (optional)
     *   "period_created" string  period created filter (optional)
     *   "user_group" string[]  usergroups filter (optional)
     *   "labels" string[]  labels filter option (optional)
     *   "org_field_id" string  *                  Custom organization field filter. To filter by a custom field with ID&#x3D;1 you need to add  *                  ?org_field.1&#x3D;value to the query string (optional)
     *
     * @param array $filters API endpoint parameters
     *
     * @throws \DeskPRO\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DeskPRO\API\Model\Response
     */
    public function getOrganizationCount(array $filters = [])
    {
        list($response) = $this->getOrganizationCountWithHttpInfo($filters);
        return $response;
    }

    /**
     * Operation getOrganizationCountWithHttpInfo
     *
     * Filters:
     *   "name" string  name filter (optional)
     *   "period_created" string  period created filter (optional)
     *   "user_group" string[]  usergroups filter (optional)
     *   "labels" string[]  labels filter option (optional)
     *   "org_field_id" string  *                  Custom organization field filter. To filter by a custom field with ID&#x3D;1 you need to add  *                  ?org_field.1&#x3D;value to the query string (optional)
     *
     * @param array $filters API endpoint parameters
     *
     * @throws \DeskPRO\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DeskPRO\API\Model\Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationCountWithHttpInfo(array $filters = [])
    {
        $returnType = '\DeskPRO\API\Model\Response';
        $request = $this->getOrganizationCountRequest($filters);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DeskPRO\API\Model\Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DeskPRO\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationCountAsync
     *
     * 
     *
     * Filters:
     *   "name" string  name filter (optional)
     *   "period_created" string  period created filter (optional)
     *   "user_group" string[]  usergroups filter (optional)
     *   "labels" string[]  labels filter option (optional)
     *   "org_field_id" string  *                  Custom organization field filter. To filter by a custom field with ID&#x3D;1 you need to add  *                  ?org_field.1&#x3D;value to the query string (optional)
     *
     * @param array $filters API endpoint parameters
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationCountAsync(array $filters = [])
    {
        return $this->getOrganizationCountAsyncWithHttpInfo($filters)
            ->then(
                function (array $response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationCountAsyncWithHttpInfo
     *
     * 
     *
     * Filters:
     *   "name" string  name filter (optional)
     *   "period_created" string  period created filter (optional)
     *   "user_group" string[]  usergroups filter (optional)
     *   "labels" string[]  labels filter option (optional)
     *   "org_field_id" string  *                  Custom organization field filter. To filter by a custom field with ID&#x3D;1 you need to add  *                  ?org_field.1&#x3D;value to the query string (optional)
     *
     * @param array $filters API endpoint parameters
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationCountAsyncWithHttpInfo(array $filters = [])
    {
        $returnType = '\DeskPRO\API\Model\Response';
        $request = $this->getOrganizationCountRequest($filters);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function (ResponseInterface $response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                                        if (isset($content->data)) {
                                            $content = $content->data;
                                        }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationCount'
     *
     * Filters:
     *   "name" string  name filter (optional)
     *   "period_created" string  period created filter (optional)
     *   "user_group" string[]  usergroups filter (optional)
     *   "labels" string[]  labels filter option (optional)
     *   "org_field_id" string  *                  Custom organization field filter. To filter by a custom field with ID&#x3D;1 you need to add  *                  ?org_field.1&#x3D;value to the query string (optional)
     *
     * @param array $filters API endpoint parameters
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrganizationCountRequest(array $filters = [])
    {
        if (!isset($filters['name'])) {
            $filters['name'] = null;
        }
        if (!isset($filters['period_created'])) {
            $filters['period_created'] = null;
        }
        if (!isset($filters['user_group'])) {
            $filters['user_group'] = null;
        }
        if (!isset($filters['labels'])) {
            $filters['labels'] = null;
        }
        if (!isset($filters['org_field_id'])) {
            $filters['org_field_id'] = null;
        }
        

        $resourcePath = '/organizations/counts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        
        // query params
        if ($filters['name'] !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($filters['name']);
        }
        // query params
        if ($filters['period_created'] !== null) {
            $queryParams['period_created'] = ObjectSerializer::toQueryValue($filters['period_created']);
        }
        // query params
        if (is_array($filters['user_group'])) {
            $filters['user_group'] = ObjectSerializer::serializeCollection($filters['user_group'], 'csv', true);
        }
        if ($filters['user_group'] !== null) {
            $queryParams['user_group'] = ObjectSerializer::toQueryValue($filters['user_group']);
        }
        // query params
        if (is_array($filters['labels'])) {
            $filters['labels'] = ObjectSerializer::serializeCollection($filters['labels'], 'csv', true);
        }
        if ($filters['labels'] !== null) {
            $queryParams['labels'] = ObjectSerializer::toQueryValue($filters['labels']);
        }
        // query params
        if ($filters['org_field_id'] !== null) {
            $queryParams['org_field.{id}'] = ObjectSerializer::toQueryValue($filters['org_field_id']);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationCustomFieldById
     *
     *
     * @param int $id The id of the resource
     *
     * @throws \DeskPRO\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DeskPRO\API\Model\Response
     */
    public function getOrganizationCustomFieldById($id)
    {
        list($response) = $this->getOrganizationCustomFieldByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getOrganizationCustomFieldByIdWithHttpInfo
     *
     *
     * @param int $id The id of the resource
     *
     * @throws \DeskPRO\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DeskPRO\API\Model\Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationCustomFieldByIdWithHttpInfo($id)
    {
        $returnType = '\DeskPRO\API\Model\Response';
        $request = $this->getOrganizationCustomFieldByIdRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DeskPRO\API\Model\Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DeskPRO\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationCustomFieldByIdAsync
     *
     * 
     *
     *
     * @param int $id The id of the resource
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationCustomFieldByIdAsync($id)
    {
        return $this->getOrganizationCustomFieldByIdAsyncWithHttpInfo($id)
            ->then(
                function (array $response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationCustomFieldByIdAsyncWithHttpInfo
     *
     * 
     *
     *
     * @param int $id The id of the resource
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationCustomFieldByIdAsyncWithHttpInfo($id)
    {
        $returnType = '\DeskPRO\API\Model\Response';
        $request = $this->getOrganizationCustomFieldByIdRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function (ResponseInterface $response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                                        if (isset($content->data)) {
                                            $content = $content->data;
                                        }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationCustomFieldById'
     *
     *
     * @param int $id The id of the resource
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrganizationCustomFieldByIdRequest($id)
    {
        if (empty($id)) {
            throw new \InvalidArgumentException('Missing parameter "$id" in OrganizationsApi::getOrganizationCustomFieldByIdRequest().');
        }
        

        $resourcePath = '/organization_custom_fields/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($id !== null) {
            $id = ObjectSerializer::toQueryValue($id);
        }
        

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationCustomFields
     *
     * Filters:
     *   "page" int  Which page to display (optional)
     *   "count" int  Resource per page count (optional)
     *   "limit" int  Max number of resources to return (optional)
     *   "ids" string  Comma separated list of IDs (optional)
     *
     * @param array $filters API endpoint parameters
     *
     * @throws \DeskPRO\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DeskPRO\API\Model\Response
     */
    public function getOrganizationCustomFields(array $filters = [])
    {
        list($response) = $this->getOrganizationCustomFieldsWithHttpInfo($filters);
        return $response;
    }

    /**
     * Operation getOrganizationCustomFieldsWithHttpInfo
     *
     * Filters:
     *   "page" int  Which page to display (optional)
     *   "count" int  Resource per page count (optional)
     *   "limit" int  Max number of resources to return (optional)
     *   "ids" string  Comma separated list of IDs (optional)
     *
     * @param array $filters API endpoint parameters
     *
     * @throws \DeskPRO\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DeskPRO\API\Model\Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationCustomFieldsWithHttpInfo(array $filters = [])
    {
        $returnType = '\DeskPRO\API\Model\Response';
        $request = $this->getOrganizationCustomFieldsRequest($filters);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DeskPRO\API\Model\Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DeskPRO\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationCustomFieldsAsync
     *
     * 
     *
     * Filters:
     *   "page" int  Which page to display (optional)
     *   "count" int  Resource per page count (optional)
     *   "limit" int  Max number of resources to return (optional)
     *   "ids" string  Comma separated list of IDs (optional)
     *
     * @param array $filters API endpoint parameters
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationCustomFieldsAsync(array $filters = [])
    {
        return $this->getOrganizationCustomFieldsAsyncWithHttpInfo($filters)
            ->then(
                function (array $response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationCustomFieldsAsyncWithHttpInfo
     *
     * 
     *
     * Filters:
     *   "page" int  Which page to display (optional)
     *   "count" int  Resource per page count (optional)
     *   "limit" int  Max number of resources to return (optional)
     *   "ids" string  Comma separated list of IDs (optional)
     *
     * @param array $filters API endpoint parameters
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationCustomFieldsAsyncWithHttpInfo(array $filters = [])
    {
        $returnType = '\DeskPRO\API\Model\Response';
        $request = $this->getOrganizationCustomFieldsRequest($filters);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function (ResponseInterface $response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                                        if (isset($content->data)) {
                                            $content = $content->data;
                                        }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationCustomFields'
     *
     * Filters:
     *   "page" int  Which page to display (optional)
     *   "count" int  Resource per page count (optional)
     *   "limit" int  Max number of resources to return (optional)
     *   "ids" string  Comma separated list of IDs (optional)
     *
     * @param array $filters API endpoint parameters
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrganizationCustomFieldsRequest(array $filters = [])
    {
        if (!isset($filters['page'])) {
            $filters['page'] = null;
        }
        if (!isset($filters['count'])) {
            $filters['count'] = null;
        }
        if (!isset($filters['limit'])) {
            $filters['limit'] = null;
        }
        if (!isset($filters['ids'])) {
            $filters['ids'] = null;
        }
        

        $resourcePath = '/organization_custom_fields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        
        // query params
        if ($filters['page'] !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($filters['page']);
        }
        // query params
        if ($filters['count'] !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($filters['count']);
        }
        // query params
        if ($filters['limit'] !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($filters['limit']);
        }
        // query params
        if ($filters['ids'] !== null) {
            $queryParams['ids'] = ObjectSerializer::toQueryValue($filters['ids']);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizations
     *
     * Filters:
     *   "page" int  Which page to display (optional)
     *   "count" int  Resource per page count (optional)
     *   "limit" int  Max number of resources to return (optional)
     *   "ids" string  Comma separated list of IDs (optional)
     *   "name" string  name filter (optional)
     *   "period_created" string  period created filter (optional)
     *   "user_group" string[]  usergroups filter (optional)
     *   "labels" string[]  labels filter option (optional)
     *   "org_field_id" string  *                  Custom organization field filter. To filter by a custom field with ID&#x3D;1 you need to add  *                  ?org_field.1&#x3D;value to the query string (optional)
     *
     * @param array $filters API endpoint parameters
     *
     * @throws \DeskPRO\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DeskPRO\API\Model\Response
     */
    public function getOrganizations(array $filters = [])
    {
        list($response) = $this->getOrganizationsWithHttpInfo($filters);
        return $response;
    }

    /**
     * Operation getOrganizationsWithHttpInfo
     *
     * Filters:
     *   "page" int  Which page to display (optional)
     *   "count" int  Resource per page count (optional)
     *   "limit" int  Max number of resources to return (optional)
     *   "ids" string  Comma separated list of IDs (optional)
     *   "name" string  name filter (optional)
     *   "period_created" string  period created filter (optional)
     *   "user_group" string[]  usergroups filter (optional)
     *   "labels" string[]  labels filter option (optional)
     *   "org_field_id" string  *                  Custom organization field filter. To filter by a custom field with ID&#x3D;1 you need to add  *                  ?org_field.1&#x3D;value to the query string (optional)
     *
     * @param array $filters API endpoint parameters
     *
     * @throws \DeskPRO\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DeskPRO\API\Model\Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationsWithHttpInfo(array $filters = [])
    {
        $returnType = '\DeskPRO\API\Model\Response';
        $request = $this->getOrganizationsRequest($filters);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DeskPRO\API\Model\Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DeskPRO\API\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationsAsync
     *
     * 
     *
     * Filters:
     *   "page" int  Which page to display (optional)
     *   "count" int  Resource per page count (optional)
     *   "limit" int  Max number of resources to return (optional)
     *   "ids" string  Comma separated list of IDs (optional)
     *   "name" string  name filter (optional)
     *   "period_created" string  period created filter (optional)
     *   "user_group" string[]  usergroups filter (optional)
     *   "labels" string[]  labels filter option (optional)
     *   "org_field_id" string  *                  Custom organization field filter. To filter by a custom field with ID&#x3D;1 you need to add  *                  ?org_field.1&#x3D;value to the query string (optional)
     *
     * @param array $filters API endpoint parameters
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationsAsync(array $filters = [])
    {
        return $this->getOrganizationsAsyncWithHttpInfo($filters)
            ->then(
                function (array $response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationsAsyncWithHttpInfo
     *
     * 
     *
     * Filters:
     *   "page" int  Which page to display (optional)
     *   "count" int  Resource per page count (optional)
     *   "limit" int  Max number of resources to return (optional)
     *   "ids" string  Comma separated list of IDs (optional)
     *   "name" string  name filter (optional)
     *   "period_created" string  period created filter (optional)
     *   "user_group" string[]  usergroups filter (optional)
     *   "labels" string[]  labels filter option (optional)
     *   "org_field_id" string  *                  Custom organization field filter. To filter by a custom field with ID&#x3D;1 you need to add  *                  ?org_field.1&#x3D;value to the query string (optional)
     *
     * @param array $filters API endpoint parameters
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationsAsyncWithHttpInfo(array $filters = [])
    {
        $returnType = '\DeskPRO\API\Model\Response';
        $request = $this->getOrganizationsRequest($filters);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function (ResponseInterface $response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                                        if (isset($content->data)) {
                                            $content = $content->data;
                                        }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (RequestException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizations'
     *
     * Filters:
     *   "page" int  Which page to display (optional)
     *   "count" int  Resource per page count (optional)
     *   "limit" int  Max number of resources to return (optional)
     *   "ids" string  Comma separated list of IDs (optional)
     *   "name" string  name filter (optional)
     *   "period_created" string  period created filter (optional)
     *   "user_group" string[]  usergroups filter (optional)
     *   "labels" string[]  labels filter option (optional)
     *   "org_field_id" string  *                  Custom organization field filter. To filter by a custom field with ID&#x3D;1 you need to add  *                  ?org_field.1&#x3D;value to the query string (optional)
     *
     * @param array $filters API endpoint parameters
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrganizationsRequest(array $filters = [])
    {
        if (!isset($filters['page'])) {
            $filters['page'] = null;
        }
        if (!isset($filters['count'])) {
            $filters['count'] = null;
        }
        if (!isset($filters['limit'])) {
            $filters['limit'] = null;
        }
        if (!isset($filters['ids'])) {
            $filters['ids'] = null;
        }
        if (!isset($filters['name'])) {
            $filters['name'] = null;
        }
        if (!isset($filters['period_created'])) {
            $filters['period_created'] = null;
        }
        if (!isset($filters['user_group'])) {
            $filters['user_group'] = null;
        }
        if (!isset($filters['labels'])) {
            $filters['labels'] = null;
        }
        if (!isset($filters['org_field_id'])) {
            $filters['org_field_id'] = null;
        }
        

        $resourcePath = '/organizations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        
        // query params
        if ($filters['page'] !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($filters['page']);
        }
        // query params
        if ($filters['count'] !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($filters['count']);
        }
        // query params
        if ($filters['limit'] !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($filters['limit']);
        }
        // query params
        if ($filters['ids'] !== null) {
            $queryParams['ids'] = ObjectSerializer::toQueryValue($filters['ids']);
        }
        // query params
        if ($filters['name'] !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($filters['name']);
        }
        // query params
        if ($filters['period_created'] !== null) {
            $queryParams['period_created'] = ObjectSerializer::toQueryValue($filters['period_created']);
        }
        // query params
        if (is_array($filters['user_group'])) {
            $filters['user_group'] = ObjectSerializer::serializeCollection($filters['user_group'], 'csv', true);
        }
        if ($filters['user_group'] !== null) {
            $queryParams['user_group'] = ObjectSerializer::toQueryValue($filters['user_group']);
        }
        // query params
        if (is_array($filters['labels'])) {
            $filters['labels'] = ObjectSerializer::serializeCollection($filters['labels'], 'csv', true);
        }
        if ($filters['labels'] !== null) {
            $queryParams['labels'] = ObjectSerializer::toQueryValue($filters['labels']);
        }
        // query params
        if ($filters['org_field_id'] !== null) {
            $queryParams['org_field.{id}'] = ObjectSerializer::toQueryValue($filters['org_field_id']);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
